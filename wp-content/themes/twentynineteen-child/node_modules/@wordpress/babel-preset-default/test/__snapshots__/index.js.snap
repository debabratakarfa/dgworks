// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Babel preset default transpilation works properly 1`] = `
"import _asyncToGenerator from \\"@babel/runtime/helpers/asyncToGenerator\\";
import _awaitAsyncGenerator from \\"@babel/runtime/helpers/awaitAsyncGenerator\\";
import _wrapAsyncGenerator from \\"@babel/runtime/helpers/wrapAsyncGenerator\\";
describe('Babel preset default', function () {
  function foo() {
    return _foo.apply(this, arguments);
  }

  function _foo() {
    _foo = _wrapAsyncGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _awaitAsyncGenerator(1);

            case 2:
              _context.next = 4;
              return 2;

            case 4:
            case \\"end\\":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));
    return _foo.apply(this, arguments);
  }

  test('support for async generator functions',
  /*#__PURE__*/
  _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2() {
    var generator;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            generator = foo();
            _context2.t0 = expect;
            _context2.next = 4;
            return generator.next();

          case 4:
            _context2.t1 = _context2.sent;
            _context2.t2 = {
              done: false,
              value: 2
            };
            (0, _context2.t0)(_context2.t1).toEqual(_context2.t2);

          case 7:
          case \\"end\\":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  })));
});"
`;
