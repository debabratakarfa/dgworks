{"version":3,"sources":["@wordpress/i18n/src/create-i18n.js"],"names":["DEFAULT_LOCALE_DATA","plural_forms","n","createI18n","initialData","initialDomain","tannin","Tannin","setLocaleData","data","domain","dcnpgettext","context","single","plural","number","undefined","__","text","_x","_n","_nx","isRTL"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport Tannin from 'tannin';\n\n/**\n * @typedef {Record<string,any>} LocaleData\n */\n\n/**\n * Default locale data to use for Tannin domain when not otherwise provided.\n * Assumes an English plural forms expression.\n *\n * @type {LocaleData}\n */\nconst DEFAULT_LOCALE_DATA = {\n\t'': {\n\t\t/** @param {number} n */\n\t\tplural_forms( n ) {\n\t\t\treturn n === 1 ? 0 : 1;\n\t\t},\n\t},\n};\n\n/**\n * An i18n instance\n *\n * @typedef {Object} I18n\n * @property {Function} setLocaleData Merges locale data into the Tannin instance by domain. Accepts data in a\n *                                    Jed-formatted JSON object shape.\n * @property {Function} __            Retrieve the translation of text.\n * @property {Function} _x            Retrieve translated string with gettext context.\n * @property {Function} _n            Translates and retrieves the singular or plural form based on the supplied\n *                                    number.\n * @property {Function} _nx           Translates and retrieves the singular or plural form based on the supplied\n *                                    number, with gettext context.\n * @property {Function} isRTL         Check if current locale is RTL.\n */\n\n/**\n * Create an i18n instance\n *\n * @param {LocaleData} [initialData]    Locale data configuration.\n * @param {string}     [initialDomain]  Domain for which configuration applies.\n * @return {I18n}                       I18n instance\n */\nexport const createI18n = ( initialData, initialDomain ) => {\n\t/**\n\t * The underlying instance of Tannin to which exported functions interface.\n\t *\n\t * @type {Tannin}\n\t */\n\tconst tannin = new Tannin( {} );\n\n\t/**\n\t * Merges locale data into the Tannin instance by domain. Accepts data in a\n\t * Jed-formatted JSON object shape.\n\t *\n\t * @see http://messageformat.github.io/Jed/\n\t *\n\t * @param {LocaleData} [data]   Locale data configuration.\n\t * @param {string}     [domain] Domain for which configuration applies.\n\t */\n\tconst setLocaleData = ( data, domain = 'default' ) => {\n\t\ttannin.data[ domain ] = {\n\t\t\t...DEFAULT_LOCALE_DATA,\n\t\t\t...tannin.data[ domain ],\n\t\t\t...data,\n\t\t};\n\n\t\t// Populate default domain configuration (supported locale date which omits\n\t\t// a plural forms expression).\n\t\ttannin.data[ domain ][ '' ] = {\n\t\t\t...DEFAULT_LOCALE_DATA[ '' ],\n\t\t\t...tannin.data[ domain ][ '' ],\n\t\t};\n\t};\n\n\t/**\n\t * Wrapper for Tannin's `dcnpgettext`. Populates default locale data if not\n\t * otherwise previously assigned.\n\t *\n\t * @param {string|undefined} domain   Domain to retrieve the translated text.\n\t * @param {string|undefined} context  Context information for the translators.\n\t * @param {string}           single   Text to translate if non-plural. Used as\n\t *                                    fallback return value on a caught error.\n\t * @param {string}           [plural] The text to be used if the number is\n\t *                                    plural.\n\t * @param {number}           [number] The number to compare against to use\n\t *                                    either the singular or plural form.\n\t *\n\t * @return {string} The translated string.\n\t */\n\tconst dcnpgettext = (\n\t\tdomain = 'default',\n\t\tcontext,\n\t\tsingle,\n\t\tplural,\n\t\tnumber\n\t) => {\n\t\tif ( ! tannin.data[ domain ] ) {\n\t\t\tsetLocaleData( undefined, domain );\n\t\t}\n\n\t\treturn tannin.dcnpgettext( domain, context, single, plural, number );\n\t};\n\n\t/**\n\t * Retrieve the translation of text.\n\t *\n\t * @see https://developer.wordpress.org/reference/functions/__/\n\t *\n\t * @param {string} text     Text to translate.\n\t * @param {string} [domain] Domain to retrieve the translated text.\n\t *\n\t * @return {string} Translated text.\n\t */\n\tconst __ = ( text, domain ) => {\n\t\treturn dcnpgettext( domain, undefined, text );\n\t};\n\n\t/**\n\t * Retrieve translated string with gettext context.\n\t *\n\t * @see https://developer.wordpress.org/reference/functions/_x/\n\t *\n\t * @param {string} text     Text to translate.\n\t * @param {string} context  Context information for the translators.\n\t * @param {string} [domain] Domain to retrieve the translated text.\n\t *\n\t * @return {string} Translated context string without pipe.\n\t */\n\tconst _x = ( text, context, domain ) => {\n\t\treturn dcnpgettext( domain, context, text );\n\t};\n\n\t/**\n\t * Translates and retrieves the singular or plural form based on the supplied\n\t * number.\n\t *\n\t * @see https://developer.wordpress.org/reference/functions/_n/\n\t *\n\t * @param {string} single   The text to be used if the number is singular.\n\t * @param {string} plural   The text to be used if the number is plural.\n\t * @param {number} number   The number to compare against to use either the\n\t *                          singular or plural form.\n\t * @param {string} [domain] Domain to retrieve the translated text.\n\t *\n\t * @return {string} The translated singular or plural form.\n\t */\n\tconst _n = ( single, plural, number, domain ) => {\n\t\treturn dcnpgettext( domain, undefined, single, plural, number );\n\t};\n\n\t/**\n\t * Translates and retrieves the singular or plural form based on the supplied\n\t * number, with gettext context.\n\t *\n\t * @see https://developer.wordpress.org/reference/functions/_nx/\n\t *\n\t * @param {string} single   The text to be used if the number is singular.\n\t * @param {string} plural   The text to be used if the number is plural.\n\t * @param {number} number   The number to compare against to use either the\n\t *                          singular or plural form.\n\t * @param {string} context  Context information for the translators.\n\t * @param {string} [domain] Domain to retrieve the translated text.\n\t *\n\t * @return {string} The translated singular or plural form.\n\t */\n\tconst _nx = ( single, plural, number, context, domain ) => {\n\t\treturn dcnpgettext( domain, context, single, plural, number );\n\t};\n\n\t/**\n\t * Check if current locale is RTL.\n\t *\n\t * **RTL (Right To Left)** is a locale property indicating that text is written from right to left.\n\t * For example, the `he` locale (for Hebrew) specifies right-to-left. Arabic (ar) is another common\n\t * language written RTL. The opposite of RTL, LTR (Left To Right) is used in other languages,\n\t * including English (`en`, `en-US`, `en-GB`, etc.), Spanish (`es`), and French (`fr`).\n\t *\n\t * @return {boolean} Whether locale is RTL.\n\t */\n\tconst isRTL = () => {\n\t\treturn 'rtl' === _x( 'ltr', 'text direction' );\n\t};\n\n\tif ( initialData ) {\n\t\tsetLocaleData( initialData, initialDomain );\n\t}\n\n\treturn {\n\t\tsetLocaleData,\n\t\t__,\n\t\t_x,\n\t\t_n,\n\t\t_nx,\n\t\tisRTL,\n\t};\n};\n"]}